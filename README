Classes marked with a * are significant to understanding the framework as a whole.

####################
#                  #
# blockpuzzle.base #
#                  #
####################

  A container for the root superclass, and included libraries.

* BPObject:
  The superclass for all higher-functioning blockpuzzle classes.  It contains code for reflection, method
  cascading, and to interact with the notification and semaphore systems.

JSON:
  An included library for generating and parsing JSON.

################################
#                              #
# blockpuzzle.controller.event #
#                              #
################################

  This contains all of the main event logic code.

* BPAction:
  An atomic game action, ie, game state change.  All game actions are subclasses of this class.

BPActorColorAction:
  A change in a color attribute of an actor.

BPAddAction:
  An addition of a new actor to the board.

* BPBehavior:
  This is a superclass for an action which involves actors moving around the board.  This action is designed to cause other actions.

BPBoardChangeAction:
  A large-scale change of the patches on a board.

BPCropAction:
  A board change that specifically involves the board becoming smaller.  Used by a standard interface component.

BPDestroyAction:
  The removal of an actor from the board, especially in edit mode.

BPDisableAction:
  Makes an actor disabled--not able to be selected, but not destroyed.

* BPEvent:
  An event is a group of actions, organized causally.  They are undone as a group.

BPInsertRowAction:
  A board change that specifically involves adding a row or column to the board.
  
* BPMoveAction:
  The most common game action: an actor moves some number of steps in a direction.

BPPatchColorAction:
  A change in a color attribute of a patch.

BPPatchFillAction:
  A board change that specifically involves setting all of the patches to a new type.

BPPatchPenAction:
  Changing a single patch to a new type.

BPPlaceAction:
  Placing an actor at some fixed place on the board.  Not for gameplay purposes (use BPMoveAction).
  
BPSelectionAction:
  Changes the currently selected actor.

BPSlideAction:
  A move action that repeats until it fails.

* BPUndoManager:
  This is an undo queue--it keeps track of events, and undoes them in a LIFO order.

###############################
#                             #
# blockpuzzle.controller.game #
#                             #
###############################

  These classes are the main game controller-layer classes.

* BPActorController:
  The superclass for actor behavior.  Each type of actor should have an individual BPActorController subclass.
  
* BPController:
  The superclass for game behavior.  Each game should have a subclass of BPController.
  
* BPPatchController:
  The superclass for patch behavior.  Each game should have at least one BPPatchController subclass.

BPTrigger:
  Will check for some condition on a set, every time an event occurs.
    
##################################
#                                #
# blockpuzzle.controller.mailbox #
#                                #
##################################

  The mailbox is a universal implementation of the Observer Pattern.  Modeled after Cocoa's NSNotificationCenter, objects can be registered
  to be notified in three different circumstances:
    (1) A specific object O sends a specific message M
    (2) A specific object O sends any message
    (3) Any object sends a specific message M
  Note that the sending object does not needs to know about the existence of the listening object.

BPDelayedCall:
  A request to call some method, on some object, later in the current frame.

* BPDelayedCallQueue:
  Manages delayed calls, calling each in turn.

* BPMailbox:
  The implementation of the Observer Pattern.  Any object can be set to be notified when a message that it cares about is generated.

* BPObserver:
  An object is listening to a/any message from a/any source.
  
BPObserverQueue:
  A group of observers, all observing the same object/lack of object.

##############################
#                            #
# blockpuzzle.controller.pen #
#                            #
##############################

  The pen is how the user interacts with the game.  It handles mouse events, keyboard events (treating arrow keys specially), and drag-and-drop.
  
BPAttributePen:
  A pen to change some attribute of patches that are clicked on.
  
BPColorPen:
  A pen to change a color attribute (defaults to 'color') of patches or actors that are clicked on.
  
BPDragObject:
  An object representing something being dragged.

* BPGamePen:
  A simple gameplay pen--pressing an arrow key moves the currently selected actor in that direction, and pressing space switches the
  selected actor.  Can be used as a subclass for more complex game pens.
  
* BPMouseEvent:
  Represents what the user is doing with the mouse--pressing it, releasing it, or dragging it.

* BPObjectPen:
  A pen for dragging objects around.
  
BPPatchPen:
  A pen for changing the type of patches.
  
* BPPen:
  The superclass for pens.  Doesn't contain much logic itself, but includes hook methods for all of the events that it the framework handles.

BPRectanglePen:
  A pen for selecting a rectangular region of the board.

################################
#                              #
# blockpuzzle.controller.phase #
#                              #
################################

  Phases are the implementation of game flow.
  
* BPPhase:
  A phase is an atomic unit of game flow.  Phaes can be entered, exited, and either succeed or fail.

* BPPhaseTable: (BPGameLoop?)
  A phase table handles phases, and transitioning between them.  It performs the main game loop.
  
##################
#                #
# blockpuzzle.io #
#                #
##################

BPInterfaceLoader:
  Handles loading a game interface from a server.
  
BPLevelLoader:
  Handles loading a game level from a server.

* BPLoader:
  A superclass for communication with a server.  Has methods to implement indicating success or failure.

* BPLoadRequest:
  The actual communication request to a server.  It keeps track of the progress, and returns to the loader the data upon success or failure.

BPTile:
  A mapping between a character and a patch key.  Used in the XML representation of levels.
  
BPTileLibrary:
  A collection of tiles--handles mapping between patch keys and characters.

################################
#                              #
# blockpuzzle.model.collection #
#                              #
################################

  Defines smarter collection classes than the base ActionScript Array class.  Defines the common functional meta-methods (select, map, etc.)

BPGroup:
  A set, specifically of actors.
  
BPPath:
  An ordered sequence of patches.  Can be walked.

BPRegion:
  A set, specifically of patches.

* BPSet:
  The superclass of collection objects.  Can be iterated over.

##########################
#                        #
# blockpuzzle.model.data #
#                        #
##########################

  Small data objects.
  
BPColor:
  A color.

BPDirection:
  A direction on a board (North is up).

##########################
#                        #
# blockpuzzle.model.game #
#                        #
##########################

  The major model objects for the blockpuzzle framework.
  
* BPActor:
  An object on the board that can move around, and be any size.

* BPBoard:
  A grid of patches, which actors can sit upon.

* BPPatch:
  A single "square" of a board.  It can change attributes, but it cannot move or change size.

##############################
#                            #
# blockpuzzle.view.animation #
#                            #
##############################

  An animation is any visual change over time.

BP2DBlend:
  A change in 2 related attributes simultaneously, like x & y or width & height.

* BPAnimation:
  An animation is something with a start and finish, that gets updated every frame to cause visual changes.
  
* BPBlend:
  A blend is a change of some attribute over a period of time.

* BPChoreographer:
  A choreographer walks an event tree, and determines from the causal relationships how each events' animations are to be sequenced in time.

BPCircularBlend:
  A change in a circular attribute, like angle of rotation.

BPEmptyAnimation:
  A no-op placeholer animation.

BPFadeToAnimation:
  A sample compound animation of a patch fading from one frame into another.

BPFrameAnimation:
  An animation that is a sequence of frame changes.

BPPatchAnimation:
  An instantaneous animation that involves all patches being visually updated at once.

BPWrapperAnimation:
  An animation that allows several animations to be treated as a single one.

##########################
#                        #
# blockpuzzle.view.clock #
#                        #
##########################

  The game clock keeps track of the frame, and elapsed time during the game.

* BPClock:
  The clock handles all time and frame related tracking.  It sends signals at the start of every frame.

BPSignal:
  A signal is a request to send a signal after some time has elapsed.

BPSignalQueue:
  Manages signals, and determines if & when a signal should be sent.

BPTimer:
  A timer sends a signal every frame, and every second, until some set time is reached.

########################
#                      #
# blockpuzzle.view.gui #
#                      #
########################

  These are gui elements (buttons, labels, images, drag wells, etc.)

BPButton:
  A single button that can be clicked on, and sends a message when it gets hit.
  
BPButtonArray:
  A group of buttons, displayed visually as a unit.

BPGeometry:
  The geometry is the grid square size for a BPGrid.

* BPGrid:
  The visual display of a BPBoard.

* BPGuiElement:
  The superclass of all interface elements.

BPImage:
  A bitmap image.

BPLabel:
  A text label.  It can be given different display formats depending on what it displays: plain text, money, score, or time.

BPMovieClipImage:
  A vector art image.  Will be folded into BPImage.

BPSelectionRectangle:
  A rectangle used to display the current selection on a board.

BPToggle:
  A two-setting toggle switch, similar to the iPhone display.

BPWell:
  A drag-and-drop well, usable as a drag source or drag target.

###########################
#                         #
# blockpuzzle.view.sprite #
#                         #
###########################

  Sprites are the superclass of everything that gets displayed on the screen.

BPCompositeSprite:
  A sprite made up of layers of sprites.  Can be nested.  Moving, resizing, etc, the composite sprite will update all of the sprites within.
  
* BPSprite:
  A visual object which can be displayed, moved, resized, etc.

BPSpriteChange:
  Keeps track of changes to a sprite, so that it only gets updated once per frame.
