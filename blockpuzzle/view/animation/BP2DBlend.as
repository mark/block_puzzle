import blockpuzzle.view.sprite.BPSpriteChange;import blockpuzzle.view.animation.*;import blockpuzzle.view.clock.BPClock;class blockpuzzle.view.animation.BP2DBlend extends BPBlend {        var initialX:Number;    var initialY:Number;        var finalX:Number;    var finalY:Number;        var methodX:String;    var methodY:String;        function BP2DBlend(sprite:BPSpriteChange, methods, options) {        super(sprite, methods[0] + "_" + methods[1], options);		this.methodX   = methods[0];        this.methodY   = methods[1];        //super(sprite, methods[0] + "_" + methods[1], options);                this.initialX   = options.from_x;                this.initialY   = options.from_y;                         this.finalX     = (options.to_x == null) ? options.via_x : options.to_x;        this.finalY     = (options.to_y == null) ? options.via_y : options.to_y;            }        function valueX(completion:Number):Number {        return initialX + (finalX - initialX) * completion;    }        function valueY(completion:Number):Number {        return initialY + (finalY - initialY) * completion;    }        function setup() {        if (initialX == null) initialX = sprite.get(methodX);        if (initialY == null) initialY = sprite.get(methodY);                var temp = (finalX - initialX) * (finalX - initialX) + (finalY - initialY) * (finalY - initialY);                if (duration == null) duration = Math.sqrt(temp) / rate;    }    function animate(completion:Number) {        var comp = blendedCompletion(completion);                sprite.change(methodX, valueX(comp));        sprite.change(methodY, valueY(comp));    }    // function toString() {    //     return "Blend{ " + sprite + " : " + methodX + "X" + methodY + " }";    // }    function start()  { super.start();  }    function finish() { super.finish(); }}